[build-system]
requires = ["hatchling>=1.25"]
build-backend = "hatchling.build"

[project]
name = "physical-ai-stl"
description = "Signal Temporal Logic (STL) & spatio-temporal logic (STREL) monitoring utilities for physics-based ML models (neural ODE/PDE, physical AI)."
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.10"
# Keep runtime install lean for users and CI; heavy stacks are optional extras below.
dependencies = ["numpy>=1.26,<2.0"]
# Version lives in the package to avoid duplication.
dynamic = ["version"]

authors = [{ name = "physical-ai-stl contributors" }]

keywords = [
  "signal temporal logic", "stl", "strel", "spatio-temporal",
  "formal methods", "cyber-physical systems", "physics-informed",
  "neural ode", "neural pde", "pinn", "pytorch"
]

classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Scientific/Engineering :: Mathematics",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]

[project.optional-dependencies]
# Optional PyTorch (kept separate so base installs remain light)
torch = ["torch>=2.3,<3.0"]

# STL/STREL monitoring stacks (opt-in)
monitoring = [
  "rtamt>=0.3,<0.4",
  "moonlight>=0.3.1",
  "spatial-spec>=0.1.1; platform_system != 'Windows'",
  "spatial @ git+https://github.com/KTH-RPL-Planiacs/SpaTiaL.git#subdirectory=spatial-lib; platform_system != 'Windows'",
]

# Physics-based ML frameworks (opt-in)
frameworks = [
  "neuromancer>=1.5.4,<2.0",
  "torchphysics>=1.0,<2.0",
  "nvidia-physicsnemo>=1.2,<2.0; platform_system == 'Linux'",
]

# Plotting & utilities used by examples/experiments (opt-in)
viz = [
  "matplotlib>=3.10,<4.0",
  "tqdm>=4.67",
  "pyyaml>=6.0.2",
  "scipy>=1.16; python_version >= '3.11'",
  "scipy>=1.15,<1.16; python_version < '3.11'",
]

# Development aids (kept out of runtime installs)
dev = [
  "pytest>=8.4,<9.0",
  "pytest-cov>=5.0,<6.0",
  "ruff>=0.12,<0.13",
  "mypy>=1.11,<2.0",
  "types-PyYAML>=6.0.12",
]

# Convenience bundle for experiments (heavy; opt-in)
all = [
  "torch>=2.3,<3.0",
  "rtamt>=0.3,<0.4",
  "moonlight>=0.3.1",
  "spatial-spec>=0.1.1; platform_system != 'Windows'",
  "spatial @ git+https://github.com/KTH-RPL-Planiacs/SpaTiaL.git#subdirectory=spatial-lib; platform_system != 'Windows'",
  "neuromancer>=1.5.4,<2.0",
  "torchphysics>=1.0,<2.0",
  "nvidia-physicsnemo>=1.2,<2.0; platform_system == 'Linux'",
  "matplotlib>=3.10,<4.0",
  "tqdm>=4.67",
  "pyyaml>=6.0.2",
  "scipy>=1.16; python_version >= '3.11'",
  "scipy>=1.15,<1.16; python_version < '3.11'",
]

[tool.hatch.version]
path = "src/physical_ai_stl/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/physical_ai_stl"]
# Ship typing marker for type checkers.
force-include = { "src/physical_ai_stl/py.typed" = "physical_ai_stl/py.typed" }

[tool.hatch.build.targets.sdist]
include = [
  "src/**",
  "tests/**",
  "README.md",
  "LICENSE",
  "pyproject.toml",
  "requirements.txt",
  "requirements-dev.txt",
  "requirements-extra.txt",
  "configs/**",
  "docs/**",
  "scripts/**",
  ".github/workflows/ci.yml",
]
exclude = ["**/__pycache__"]

# -----------------------------
# Testing
# -----------------------------
[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-q"
testpaths = ["tests"]
filterwarnings = ["ignore::DeprecationWarning"]

# -----------------------------
# Ruff (fast linter/formatter)
# -----------------------------
[tool.ruff]
line-length = 120
target-version = "py310"

[tool.ruff.lint]
# Signal > noise: keep the rule set modest for speed, relax a few rules only for tests.
select = ["E", "F", "I", "UP"]
per-file-ignores = { "tests/**.py" = ["I001", "E501", "UP035", "UP038"] }

[tool.ruff.format]
quote-style = "preserve"

# -----------------------------
# MyPy (practical strictness)
# -----------------------------
[tool.mypy]
python_version = "3.10"
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
ignore_missing_imports = true

# -----------------------------
# uv: deterministic, fast installs
# -----------------------------
[tool.uv]
# So setup-uv doesn't fall back to "latest" at each run
required-version = ">=0.8.15"

[tool.uv.pip]
# Fewer forks for faster resolution on CI
fork-strategy = "fewest"

[tool.uv.sources]
# If torch is requested via extras, prefer CPU wheels to avoid multi-GB CUDA downloads
torch = { index = "pytorch-cpu" }
# NVIDIA PhysicsNeMo wheels live on NVIDIA's index
"nvidia-physicsnemo" = { index = "nvidia" }

[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[[tool.uv.index]]
name = "nvidia"
url = "https://pypi.nvidia.com/simple"
explicit = true
